/**
 * skylark-panolens - A version of panolens that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-panolens/
 * @license MIT
 */
define(["skylark-threejs"],function(t){"use strict";function e(e=16777215,i=!0,a=1500){this.dpr=window.devicePixelRatio;const{canvas:s,context:n}=this.createCanvas(),r=new t.SpriteMaterial({color:e,map:this.createCanvasTexture(s)});t.Sprite.call(this,r),this.canvasWidth=s.width,this.canvasHeight=s.height,this.context=n,this.color=e instanceof t.Color?e:new t.Color(e),this.autoSelect=i,this.dwellTime=a,this.rippleDuration=500,this.position.z=-10,this.center.set(.5,.5),this.scale.set(.5,.5,1),this.startTimestamp=null,this.timerId=null,this.callback=null,this.frustumCulled=!1,this.updateCanvasArcByProgress(0)}return e.prototype=Object.assign(Object.create(t.Sprite.prototype),{constructor:e,setColor:function(e){this.material.color.copy(e instanceof t.Color?e:new t.Color(e))},createCanvasTexture:function(e){const i=new t.CanvasTexture(e);return i.minFilter=t.LinearFilter,i.magFilter=t.LinearFilter,i.generateMipmaps=!1,i},createCanvas:function(){const t=document.createElement("canvas"),e=t.getContext("2d"),i=this.dpr;return t.width=32*i,t.height=32*i,e.scale(i,i),e.shadowBlur=5,e.shadowColor="rgba(200,200,200,0.9)",{canvas:t,context:e}},updateCanvasArcByProgress:function(t){const e=this.context,{canvasWidth:i,canvasHeight:a,material:s}=this,n=this.dpr,r=t*Math.PI*2,c=this.color.getStyle(),o=.5*i/n,h=.5*a/n;e.clearRect(0,0,i,a),e.beginPath(),0===t?(e.arc(o,h,i/16,0,2*Math.PI),e.fillStyle=c,e.fill()):(e.arc(o,h,i/4-3,-Math.PI/2,-Math.PI/2+r),e.strokeStyle=c,e.lineWidth=3,e.stroke()),e.closePath(),s.map.needsUpdate=!0},ripple:function(){const t=this.context,{canvasWidth:e,canvasHeight:i,material:a}=this,s=this.rippleDuration,n=performance.now(),r=this.color,c=this.dpr,o=.5*e/c,h=.5*i/c,l=()=>{const p=window.requestAnimationFrame(l),d=(performance.now()-n)/s,u=1-d>0?1-d:0,m=d*e*.5/c;t.clearRect(0,0,e,i),t.beginPath(),t.arc(o,h,m,0,2*Math.PI),t.fillStyle=`rgba(${255*r.r}, ${255*r.g}, ${255*r.b}, ${u})`,t.fill(),t.closePath(),d>=1&&(window.cancelAnimationFrame(p),this.updateCanvasArcByProgress(0),this.dispatchEvent({type:"reticle-ripple-end"})),a.map.needsUpdate=!0};this.dispatchEvent({type:"reticle-ripple-start"}),l()},show:function(){this.visible=!0},hide:function(){this.visible=!1},start:function(t){this.autoSelect&&(this.dispatchEvent({type:"reticle-start"}),this.startTimestamp=performance.now(),this.callback=t,this.update())},end:function(){this.startTimestamp&&(window.cancelAnimationFrame(this.timerId),this.updateCanvasArcByProgress(0),this.callback=null,this.timerId=null,this.startTimestamp=null,this.dispatchEvent({type:"reticle-end"}))},update:function(){this.timerId=window.requestAnimationFrame(this.update.bind(this));const t=(performance.now()-this.startTimestamp)/this.dwellTime;this.updateCanvasArcByProgress(t),this.dispatchEvent({type:"reticle-update",progress:t}),t>=1&&(window.cancelAnimationFrame(this.timerId),this.callback&&this.callback(),this.end(),this.ripple())}}),e});
//# sourceMappingURL=../sourcemaps/interface/Reticle.js.map
