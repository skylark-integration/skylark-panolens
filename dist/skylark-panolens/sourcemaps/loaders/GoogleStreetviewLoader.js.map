{"version":3,"sources":["loaders/GoogleStreetviewLoader.js"],"names":["define","TextureLoader","GoogleStreetviewLoader","parameters","gl","this","_parameters","_zoom","_panoId","_panoClient","google","maps","StreetViewService","_count","_total","_canvas","_ctx","_wc","_hc","result","rotation","copyright","onSizeChange","onPanoramaLoad","levelsW","levelsH","widths","heights","maxW","maxH","canvas","document","createElement","getContext","error","Math","max","getParameter","MAX_TEXTURE_SIZE","Object","assign","prototype","constructor","setProgress","loaded","total","onProgress","adaptTextureToZoom","w","h","ceil","y","x","c","width","height","push","composeFromTile","texture","px","floor","py","drawImage","progress","panoId","zoom","composePanorama","self","useWebGL","url","load","img","Image","addEventListener","crossOrigin","src","panoid","loadPano","id","getPanoramaById","status","StreetViewStatus","OK","location","pano","setZoom","z"],"mappings":"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","file":"../../loaders/GoogleStreetviewLoader.js","sourcesContent":["define(['./TextureLoader'], function (TextureLoader) {\n    'use strict';\n    function GoogleStreetviewLoader(parameters = {}) {\n        this._parameters = parameters;\n        this._zoom = null;\n        this._panoId = null;\n        this._panoClient = new google.maps.StreetViewService();\n        this._count = 0;\n        this._total = 0;\n        this._canvas = [];\n        this._ctx = [];\n        this._wc = 0;\n        this._hc = 0;\n        this.result = null;\n        this.rotation = 0;\n        this.copyright = '';\n        this.onSizeChange = null;\n        this.onPanoramaLoad = null;\n        this.levelsW = [\n            1,\n            2,\n            4,\n            7,\n            13,\n            26\n        ];\n        this.levelsH = [\n            1,\n            1,\n            2,\n            4,\n            7,\n            13\n        ];\n        this.widths = [\n            416,\n            832,\n            1664,\n            3328,\n            6656,\n            13312\n        ];\n        this.heights = [\n            416,\n            416,\n            832,\n            1664,\n            3328,\n            6656\n        ];\n        this.maxW = 6656;\n        this.maxH = 6656;\n        let gl;\n        try {\n            const canvas = document.createElement('canvas');\n            gl = canvas.getContext('experimental-webgl');\n            if (!gl) {\n                gl = canvas.getContext('webgl');\n            }\n        } catch (error) {\n        }\n        this.maxW = Math.max(gl.getParameter(gl.MAX_TEXTURE_SIZE), this.maxW);\n        this.maxH = Math.max(gl.getParameter(gl.MAX_TEXTURE_SIZE), this.maxH);\n    }\n    Object.assign(GoogleStreetviewLoader.prototype, {\n        constructor: GoogleStreetviewLoader,\n        setProgress: function (loaded, total) {\n            if (this.onProgress) {\n                this.onProgress({\n                    loaded: loaded,\n                    total: total\n                });\n            }\n        },\n        adaptTextureToZoom: function () {\n            const w = this.widths[this._zoom];\n            const h = this.heights[this._zoom];\n            const maxW = this.maxW;\n            const maxH = this.maxH;\n            this._wc = Math.ceil(w / maxW);\n            this._hc = Math.ceil(h / maxH);\n            for (let y = 0; y < this._hc; y++) {\n                for (let x = 0; x < this._wc; x++) {\n                    const c = document.createElement('canvas');\n                    if (x < this._wc - 1)\n                        c.width = maxW;\n                    else\n                        c.width = w - maxW * x;\n                    if (y < this._hc - 1)\n                        c.height = maxH;\n                    else\n                        c.height = h - maxH * y;\n                    this._canvas.push(c);\n                    this._ctx.push(c.getContext('2d'));\n                }\n            }\n        },\n        composeFromTile: function (x, y, texture) {\n            const maxW = this.maxW;\n            const maxH = this.maxH;\n            x *= 512;\n            y *= 512;\n            const px = Math.floor(x / maxW);\n            const py = Math.floor(y / maxH);\n            x -= px * maxW;\n            y -= py * maxH;\n            this._ctx[py * this._wc + px].drawImage(texture, 0, 0, texture.width, texture.height, x, y, 512, 512);\n            this.progress();\n        },\n        progress: function () {\n            this._count++;\n            this.setProgress(this._count, this._total);\n            if (this._count === this._total) {\n                this.canvas = this._canvas;\n                this.panoId = this._panoId;\n                this.zoom = this._zoom;\n                if (this.onPanoramaLoad) {\n                    this.onPanoramaLoad(this._canvas[0]);\n                }\n            }\n        },\n        composePanorama: function () {\n            this.setProgress(0, 1);\n            const w = this.levelsW[this._zoom];\n            const h = this.levelsH[this._zoom];\n            const self = this;\n            this._count = 0;\n            this._total = w * h;\n            const {useWebGL} = this._parameters;\n            for (let y = 0; y < h; y++) {\n                for (let x = 0; x < w; x++) {\n                    const url = 'https://geo0.ggpht.com/cbk?cb_client=maps_sv.tactile&authuser=0&hl=en&output=tile&zoom=' + this._zoom + '&x=' + x + '&y=' + y + '&panoid=' + this._panoId + '&nbt&fover=2';\n                    (function (x, y) {\n                        if (useWebGL) {\n                            const texture = TextureLoader.load(url, null, function () {\n                                self.composeFromTile(x, y, texture);\n                            });\n                        } else {\n                            const img = new Image();\n                            img.addEventListener('load', function () {\n                                self.composeFromTile(x, y, this);\n                            });\n                            img.crossOrigin = '';\n                            img.src = url;\n                        }\n                    }(x, y));\n                }\n            }\n        },\n        load: function (panoid) {\n            this.loadPano(panoid);\n        },\n        loadPano: function (id) {\n            const self = this;\n            this._panoClient.getPanoramaById(id, function (result, status) {\n                if (status === google.maps.StreetViewStatus.OK) {\n                    self.result = result;\n                    self.copyright = result.copyright;\n                    self._panoId = result.location.pano;\n                    self.composePanorama();\n                }\n            });\n        },\n        setZoom: function (z) {\n            this._zoom = z;\n            this.adaptTextureToZoom();\n        }\n    });\n    return GoogleStreetviewLoader;\n});"]}