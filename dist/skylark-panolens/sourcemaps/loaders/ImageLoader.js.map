{"version":3,"sources":["loaders/ImageLoader.js"],"names":["define","DataImage","THREE","load","url","onLoad","onProgress","onError","cached","request","arrayBufferView","blob","urlCreator","image","reference","Cache","enabled","iconName","hasOwnProperty","undefined","get","setTimeout","loaded","total","window","URL","webkitURL","document","createElementNS","add","onImageLoaded","revokeObjectURL","src","indexOf","addEventListener","crossOrigin","this","XMLHttpRequest","open","responseType","event","lengthComputable","currentTarget","response","Uint8Array","Blob","createObjectURL","send"],"mappings":";;;;;;;AAAAA,QACI,eACA,mBACD,SAAUC,EAAWC,GACpB,aAoEA,OAlEIC,KAAM,SAAUC,EAAKC,EAAS,SAC3BC,EAAa,SACbC,EAAU,UAGT,IAAIC,EAAQC,EAASC,EAAiBC,EAAMC,EAAYC,EAAOC,EAD/DZ,EAAMa,MAAMC,SAAU,EAEtB,IAAK,IAAIC,KAAYhB,EACbA,EAAUiB,eAAeD,IAAab,IAAQH,EAAUgB,KACxDH,EAAYG,GAIpB,QAAeE,KADfX,EAASN,EAAMa,MAAMK,IAAIN,GAAwBV,IAW7C,OATIC,GACAgB,WAAW,WACPf,GACIgB,OAAQ,EACRC,MAAO,IAEXlB,EAAOG,IACR,GAEAA,EAEXI,EAAaY,OAAOC,KAAOD,OAAOE,UAClCb,EAAQc,SAASC,gBAAgB,+BAAgC,OACjE1B,EAAMa,MAAMc,IAAIf,GAAwBV,EAAKS,GAC7C,MAAMiB,EAAgB,KAClBlB,EAAWmB,gBAAgBlB,EAAMmB,KACjC3B,EAAOQ,IAEX,GAA6B,IAAzBT,EAAI6B,QAAQ,SAGZ,OAFApB,EAAMqB,iBAAiB,OAAQJ,GAAe,GAC9CjB,EAAMmB,IAAM5B,EACLS,EAEXA,EAAMsB,iBAAmChB,IAArBiB,KAAKD,YAA4BC,KAAKD,YAAc,IACxE1B,EAAU,IAAIe,OAAOa,gBACbC,KAAK,MAAOlC,GAAK,GACzBK,EAAQ8B,aAAe,cACvB9B,EAAQyB,iBAAiB,QAAS3B,GAClCE,EAAQyB,iBAAiB,WAAYM,IACjC,IAAKA,EACD,OACJ,MAAMlB,OAACA,EAAMC,MAAEA,EAAKkB,iBAAEA,GAAoBD,EACtCC,GACAnC,GACIgB,OAAAA,EACAC,MAAAA,MAIZd,EAAQyB,iBAAiB,UAAWM,IAChC,IAAKA,EACD,OACJ,MACIE,eAAeC,SAACA,IAChBH,EACJ9B,EAAkB,IAAIkC,WAAWD,GACjChC,EAAO,IAAIa,OAAOqB,MAAMnC,IACxBG,EAAMqB,iBAAiB,OAAQJ,GAAe,GAC9CjB,EAAMmB,IAAMpB,EAAWkC,gBAAgBnC,KAE3CF,EAAQsC,KAAK","file":"../../loaders/ImageLoader.js","sourcesContent":["define([\n    '../DataImage',\n    'skylark-threejs'\n], function (DataImage, THREE) {\n    'use strict';\n    const ImageLoader = {\n        load: function (url, onLoad = () => {\n        }, onProgress = () => {\n        }, onError = () => {\n        }) {\n            THREE.Cache.enabled = true;\n            let cached, request, arrayBufferView, blob, urlCreator, image, reference;\n            for (let iconName in DataImage) {\n                if (DataImage.hasOwnProperty(iconName) && url === DataImage[iconName]) {\n                    reference = iconName;\n                }\n            }\n            cached = THREE.Cache.get(reference ? reference : url);\n            if (cached !== undefined) {\n                if (onLoad) {\n                    setTimeout(function () {\n                        onProgress({\n                            loaded: 1,\n                            total: 1\n                        });\n                        onLoad(cached);\n                    }, 0);\n                }\n                return cached;\n            }\n            urlCreator = window.URL || window.webkitURL;\n            image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n            THREE.Cache.add(reference ? reference : url, image);\n            const onImageLoaded = () => {\n                urlCreator.revokeObjectURL(image.src);\n                onLoad(image);\n            };\n            if (url.indexOf('data:') === 0) {\n                image.addEventListener('load', onImageLoaded, false);\n                image.src = url;\n                return image;\n            }\n            image.crossOrigin = this.crossOrigin !== undefined ? this.crossOrigin : '';\n            request = new window.XMLHttpRequest();\n            request.open('GET', url, true);\n            request.responseType = 'arraybuffer';\n            request.addEventListener('error', onError);\n            request.addEventListener('progress', event => {\n                if (!event)\n                    return;\n                const {loaded, total, lengthComputable} = event;\n                if (lengthComputable) {\n                    onProgress({\n                        loaded,\n                        total\n                    });\n                }\n            });\n            request.addEventListener('loadend', event => {\n                if (!event)\n                    return;\n                const {\n                    currentTarget: {response}\n                } = event;\n                arrayBufferView = new Uint8Array(response);\n                blob = new window.Blob([arrayBufferView]);\n                image.addEventListener('load', onImageLoaded, false);\n                image.src = urlCreator.createObjectURL(blob);\n            });\n            request.send(null);\n        }\n    };\n    return ImageLoader;\n});"]}