{"version":3,"sources":["panorama/ImagePanorama.js"],"names":["define","Panorama","TextureLoader","THREE","ImagePanorama","image","_geometry","_material","geometry","SphereBufferGeometry","material","MeshBasicMaterial","opacity","transparent","call","this","src","radius","prototype","Object","assign","create","constructor","load","onLoad","bind","onProgress","onError","HTMLImageElement","Texture","console","warn","texture","minFilter","magFilter","LinearFilter","needsUpdate","updateTexture","window","requestAnimationFrame","reset","dispose","map","Cache","remove"],"mappings":";;;;;;;AAAAA,QACI,aACA,2BACA,mBACD,SAAUC,EAAUC,EAAeC,GAClC,aACA,SAASC,EAAcC,EAAOC,EAAWC,GACrC,MACMC,EAAWF,GAAa,IAAIH,EAAMM,qBADzB,IACsD,GAAI,IACnEC,EAAWH,GAAa,IAAIJ,EAAMQ,mBACpCC,QAAS,EACTC,aAAa,IAEjBZ,EAASa,KAAKC,KAAMP,EAAUE,GAC9BK,KAAKC,IAAMX,EACXU,KAAKE,OARU,IA2CnB,OAjCAb,EAAcc,UAAYC,OAAOC,OAAOD,OAAOE,OAAOpB,EAASiB,YAC3DI,YAAalB,EACbmB,KAAM,SAAUP,IACZA,EAAMA,GAAOD,KAAKC,KAIQ,iBAARA,EACdd,EAAcqB,KAAKP,EAAKD,KAAKS,OAAOC,KAAKV,MAAOA,KAAKW,WAAWD,KAAKV,MAAOA,KAAKY,QAAQF,KAAKV,OACvFC,aAAeY,kBACtBb,KAAKS,OAAO,IAAIrB,EAAM0B,QAAQb,IAL9Bc,QAAQC,KAAK,2BAQrBP,OAAQ,SAAUQ,GACdA,EAAQC,UAAYD,EAAQE,UAAY/B,EAAMgC,aAC9CH,EAAQI,aAAc,EACtBrB,KAAKsB,cAAcL,GACnBM,OAAOC,sBAAsBtC,EAASiB,UAAUM,OAAOC,KAAKV,QAEhEyB,MAAO,WACHvC,EAASiB,UAAUsB,MAAM1B,KAAKC,OAElC0B,QAAS,WACL,MACI/B,UAAUgC,IAACA,IACX3B,KACJZ,EAAMwC,MAAMC,OAAO7B,KAAKC,KACpB0B,GACAA,EAAID,UAERxC,EAASiB,UAAUuB,QAAQ3B,KAAKC,SAGjCX","file":"../../panorama/ImagePanorama.js","sourcesContent":["define([\n    './Panorama',\n    '../loaders/TextureLoader',\n    'skylark-threejs'\n], function (Panorama, TextureLoader, THREE) {\n    'use strict';\n    function ImagePanorama(image, _geometry, _material) {\n        const radius = 5000;\n        const geometry = _geometry || new THREE.SphereBufferGeometry(radius, 60, 40);\n        const material = _material || new THREE.MeshBasicMaterial({\n            opacity: 0,\n            transparent: true\n        });\n        Panorama.call(this, geometry, material);\n        this.src = image;\n        this.radius = radius;\n    }\n    ImagePanorama.prototype = Object.assign(Object.create(Panorama.prototype), {\n        constructor: ImagePanorama,\n        load: function (src) {\n            src = src || this.src;\n            if (!src) {\n                console.warn('Image source undefined');\n                return;\n            } else if (typeof src === 'string') {\n                TextureLoader.load(src, this.onLoad.bind(this), this.onProgress.bind(this), this.onError.bind(this));\n            } else if (src instanceof HTMLImageElement) {\n                this.onLoad(new THREE.Texture(src));\n            }\n        },\n        onLoad: function (texture) {\n            texture.minFilter = texture.magFilter = THREE.LinearFilter;\n            texture.needsUpdate = true;\n            this.updateTexture(texture);\n            window.requestAnimationFrame(Panorama.prototype.onLoad.bind(this));\n        },\n        reset: function () {\n            Panorama.prototype.reset.call(this);\n        },\n        dispose: function () {\n            const {\n                material: {map}\n            } = this;\n            THREE.Cache.remove(this.src);\n            if (map) {\n                map.dispose();\n            }\n            Panorama.prototype.dispose.call(this);\n        }\n    });\n    return ImagePanorama;\n});"]}