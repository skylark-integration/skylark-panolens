{"version":3,"sources":["panorama/LittlePlanet.js"],"names":["define","ImagePanorama","Infospot","Constants","StereographicShader","THREE","LittlePlanet","type","source","size","ratio","call","this","createGeometry","createMaterial","EPS","frameId","dragging","userMouse","Vector2","quatA","Quaternion","quatB","quatCur","quatSlerp","vectorX","Vector3","vectorY","addEventListener","onWindowResize","prototype","Object","assign","create","constructor","add","object","arguments","length","i","material","depthTest","PlaneBufferGeometry","shader","uniforms","zoom","value","opacity","ShaderMaterial","vertexShader","fragmentShader","side","BackSide","transparent","registerMouseEvents","container","onMouseDown","bind","passive","onMouseMove","onMouseUp","onMouseWheel","onContextMenu","unregisterMouseEvents","removeEventListener","event","touches","x","clientX","y","clientY","set","dx","pageX","dy","pageY","distance","Math","sqrt","pinchDistance","onUpdateCallback","angleX","degToRad","angleY","setFromAxisAngle","multiply","addZoomDelta","preventDefault","stopPropagation","delta","undefined","wheelDelta","detail","lowerBound","upperBound","window","requestAnimationFrame","slerp","transform","makeRotationFromQuaternion","clone","dot","cancelAnimationFrame","reset","onLoad","texture","resolution","clientWidth","clientHeight","dispatchEvent","method","onLeave","data","CONTROLS","ORBIT","dispose"],"mappings":";;;;;;;AAAAA,QACI,kBACA,uBACA,eACA,iCACA,mBACD,SAAUC,EAAeC,EAAUC,EAAWC,EAAqBC,GAClE,aACA,SAASC,EAAaC,EAAO,QAASC,EAAQC,EAAO,IAAOC,EAAQ,IACnD,UAATH,GACAN,EAAcU,KAAKC,KAAMJ,EAAQI,KAAKC,eAAeJ,EAAMC,GAAQE,KAAKE,eAAeL,IAE3FG,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKG,IAAM,KACXH,KAAKI,QAAU,KACfJ,KAAKK,UAAW,EAChBL,KAAKM,UAAY,IAAIb,EAAMc,QAC3BP,KAAKQ,MAAQ,IAAIf,EAAMgB,WACvBT,KAAKU,MAAQ,IAAIjB,EAAMgB,WACvBT,KAAKW,QAAU,IAAIlB,EAAMgB,WACzBT,KAAKY,UAAY,IAAInB,EAAMgB,WAC3BT,KAAKa,QAAU,IAAIpB,EAAMqB,QAAQ,EAAG,EAAG,GACvCd,KAAKe,QAAU,IAAItB,EAAMqB,QAAQ,EAAG,EAAG,GACvCd,KAAKgB,iBAAiB,gBAAiBhB,KAAKiB,gBA0KhD,OAxKAvB,EAAawB,UAAYC,OAAOC,OAAOD,OAAOE,OAAOhC,EAAc6B,YAC/DI,YAAa5B,EACb6B,IAAK,SAAUC,GACX,GAAIC,UAAUC,OAAS,EAAG,CACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,UAAUC,OAAQC,IAClC3B,KAAKuB,IAAIE,UAAUE,IAEvB,OAAO3B,KAEPwB,aAAkBlC,IAClBkC,EAAOI,SAASC,WAAY,GAEhCxC,EAAc6B,UAAUK,IAAIxB,KAAKC,KAAMwB,IAE3CvB,eAAgB,SAAUJ,EAAMC,GAC5B,OAAO,IAAIL,EAAMqC,oBAAoBjC,EAAMA,EAAOC,IAEtDI,eAAgB,SAAUL,GACtB,MAAMkC,EAASZ,OAAOC,UAAW5B,GAAsBwC,EAAWD,EAAOC,SAGzE,OAFAA,EAASC,KAAKC,MAAQrC,EACtBmC,EAASG,QAAQD,MAAQ,EAClB,IAAIzC,EAAM2C,gBACbJ,SAAUA,EACVK,aAAcN,EAAOM,aACrBC,eAAgBP,EAAOO,eACvBC,KAAM9C,EAAM+C,SACZC,aAAa,KAGrBC,oBAAqB,WACjB1C,KAAK2C,UAAU3B,iBAAiB,YAAahB,KAAK4C,YAAYC,KAAK7C,OAAS8C,SAAS,IACrF9C,KAAK2C,UAAU3B,iBAAiB,YAAahB,KAAK+C,YAAYF,KAAK7C,OAAS8C,SAAS,IACrF9C,KAAK2C,UAAU3B,iBAAiB,UAAWhB,KAAKgD,UAAUH,KAAK7C,OAAS8C,SAAS,IACjF9C,KAAK2C,UAAU3B,iBAAiB,aAAchB,KAAK4C,YAAYC,KAAK7C,OAAS8C,SAAS,IACtF9C,KAAK2C,UAAU3B,iBAAiB,YAAahB,KAAK+C,YAAYF,KAAK7C,OAAS8C,SAAS,IACrF9C,KAAK2C,UAAU3B,iBAAiB,WAAYhB,KAAKgD,UAAUH,KAAK7C,OAAS8C,SAAS,IAClF9C,KAAK2C,UAAU3B,iBAAiB,aAAchB,KAAKiD,aAAaJ,KAAK7C,OAAS8C,SAAS,IACvF9C,KAAK2C,UAAU3B,iBAAiB,iBAAkBhB,KAAKiD,aAAaJ,KAAK7C,OAAS8C,SAAS,IAC3F9C,KAAK2C,UAAU3B,iBAAiB,cAAehB,KAAKkD,cAAcL,KAAK7C,OAAS8C,SAAS,KAE7FK,sBAAuB,WACnBnD,KAAK2C,UAAUS,oBAAoB,YAAapD,KAAK4C,YAAYC,KAAK7C,OAAO,GAC7EA,KAAK2C,UAAUS,oBAAoB,YAAapD,KAAK+C,YAAYF,KAAK7C,OAAO,GAC7EA,KAAK2C,UAAUS,oBAAoB,UAAWpD,KAAKgD,UAAUH,KAAK7C,OAAO,GACzEA,KAAK2C,UAAUS,oBAAoB,aAAcpD,KAAK4C,YAAYC,KAAK7C,OAAO,GAC9EA,KAAK2C,UAAUS,oBAAoB,YAAapD,KAAK+C,YAAYF,KAAK7C,OAAO,GAC7EA,KAAK2C,UAAUS,oBAAoB,WAAYpD,KAAKgD,UAAUH,KAAK7C,OAAO,GAC1EA,KAAK2C,UAAUS,oBAAoB,aAAcpD,KAAKiD,aAAaJ,KAAK7C,OAAO,GAC/EA,KAAK2C,UAAUS,oBAAoB,iBAAkBpD,KAAKiD,aAAaJ,KAAK7C,OAAO,GACnFA,KAAK2C,UAAUS,oBAAoB,cAAepD,KAAKkD,cAAcL,KAAK7C,OAAO,IAErF4C,YAAa,SAAUS,GAEnB,OADmBA,EAAMC,SAAWD,EAAMC,QAAQ5B,QAAU,GAE5D,KAAK,EACD,MAAM6B,EAAIF,EAAMG,SAAW,EAAIH,EAAMG,QAAUH,EAAMC,QAAQ,GAAGE,QAC1DC,EAAIJ,EAAMK,SAAW,EAAIL,EAAMK,QAAUL,EAAMC,QAAQ,GAAGI,QAChE1D,KAAKK,UAAW,EAChBL,KAAKM,UAAUqD,IAAIJ,EAAGE,GACtB,MACJ,KAAK,EACD,MAAMG,EAAKP,EAAMC,QAAQ,GAAGO,MAAQR,EAAMC,QAAQ,GAAGO,MAC/CC,EAAKT,EAAMC,QAAQ,GAAGS,MAAQV,EAAMC,QAAQ,GAAGS,MAC/CC,EAAWC,KAAKC,KAAKN,EAAKA,EAAKE,EAAKA,GAC1C9D,KAAKM,UAAU6D,cAAgBH,EAKnChE,KAAKoE,oBAETrB,YAAa,SAAUM,GAEnB,OADmBA,EAAMC,SAAWD,EAAMC,QAAQ5B,QAAU,GAE5D,KAAK,EACD,MAAM6B,EAAIF,EAAMG,SAAW,EAAIH,EAAMG,QAAUH,EAAMC,QAAQ,GAAGE,QAC1DC,EAAIJ,EAAMK,SAAW,EAAIL,EAAMK,QAAUL,EAAMC,QAAQ,GAAGI,QAC1DW,EAAqD,GAA5C5E,EAAMwE,KAAKK,SAASf,EAAIvD,KAAKM,UAAUiD,GAChDgB,EAAqD,GAA5C9E,EAAMwE,KAAKK,SAASb,EAAIzD,KAAKM,UAAUmD,GAClDzD,KAAKK,WACLL,KAAKQ,MAAMgE,iBAAiBxE,KAAKe,QAASsD,GAC1CrE,KAAKU,MAAM8D,iBAAiBxE,KAAKa,QAAS0D,GAC1CvE,KAAKW,QAAQ8D,SAASzE,KAAKQ,OAAOiE,SAASzE,KAAKU,OAChDV,KAAKM,UAAUqD,IAAIJ,EAAGE,IAE1B,MACJ,KAAK,EACD,MAAMG,EAAKP,EAAMC,QAAQ,GAAGO,MAAQR,EAAMC,QAAQ,GAAGO,MAC/CC,EAAKT,EAAMC,QAAQ,GAAGS,MAAQV,EAAMC,QAAQ,GAAGS,MAC/CC,EAAWC,KAAKC,KAAKN,EAAKA,EAAKE,EAAKA,GAC1C9D,KAAK0E,aAAa1E,KAAKM,UAAU6D,cAAgBH,KAMzDhB,UAAW,WACPhD,KAAKK,UAAW,GAEpB4C,aAAc,SAAUI,GACpBA,EAAMsB,iBACNtB,EAAMuB,kBACN,IAAIC,EAAQ,OACaC,IAArBzB,EAAM0B,WACNF,EAAQxB,EAAM0B,gBACUD,IAAjBzB,EAAM2B,SACbH,GAASxB,EAAM2B,QAEnBhF,KAAK0E,aAAaG,GAClB7E,KAAKoE,oBAETM,aAAc,SAAUG,GACpB,MAAM7C,EAAWhC,KAAK4B,SAASI,SACzBiD,EAAyB,GAAZjF,KAAKH,KAClBqF,EAAyB,GAAZlF,KAAKH,KACxBmC,EAASC,KAAKC,OAAS2C,EACnB7C,EAASC,KAAKC,OAAS+C,EACvBjD,EAASC,KAAKC,MAAQ+C,EACfjD,EAASC,KAAKC,OAASgD,IAC9BlD,EAASC,KAAKC,MAAQgD,IAG9Bd,iBAAkB,WACdpE,KAAKI,QAAU+E,OAAOC,sBAAsBpF,KAAKoE,iBAAiBvB,KAAK7C,OACvEA,KAAKY,UAAUyE,MAAMrF,KAAKW,QAAS,IAC/BX,KAAK4B,UACL5B,KAAK4B,SAASI,SAASsD,UAAUpD,MAAMqD,2BAA2BvF,KAAKY,YAEtEZ,KAAKK,UAAY,EAAIL,KAAKY,UAAU4E,QAAQC,IAAIzF,KAAKW,SAAWX,KAAKG,KACtEgF,OAAOO,qBAAqB1F,KAAKI,UAGzCuF,MAAO,WACH3F,KAAKW,QAAQgD,IAAI,EAAG,EAAG,EAAG,GAC1B3D,KAAKY,UAAU+C,IAAI,EAAG,EAAG,EAAG,GAC5B3D,KAAKoE,oBAETwB,OAAQ,SAAUC,GACd7F,KAAK4B,SAASI,SAAS8D,WAAW5D,MAAQlC,KAAK2C,UAAUoD,YAAc/F,KAAK2C,UAAUqD,aACtFhG,KAAK0C,sBACL1C,KAAKoE,mBACLpE,KAAKiG,eACDtG,KAAM,0BACNuG,OAAQ,mBAEZ7G,EAAc6B,UAAU0E,OAAO7F,KAAKC,KAAM6F,IAE9CM,QAAS,WACLnG,KAAKmD,wBACLnD,KAAKiG,eACDtG,KAAM,0BACNuG,OAAQ,gBACRE,KAAM7G,EAAU8G,SAASC,QAE7BnB,OAAOO,qBAAqB1F,KAAKI,SACjCf,EAAc6B,UAAUiF,QAAQpG,KAAKC,OAEzCiB,eAAgB,WACZjB,KAAK4B,SAASI,SAAS8D,WAAW5D,MAAQlC,KAAK2C,UAAUoD,YAAc/F,KAAK2C,UAAUqD,cAE1F9C,cAAe,WACXlD,KAAKK,UAAW,GAEpBkG,QAAS,WACLvG,KAAKmD,wBACL9D,EAAc6B,UAAUqF,QAAQxG,KAAKC,SAGtCN","file":"../../panorama/LittlePlanet.js","sourcesContent":["define([\n    './ImagePanorama',\n    '../infospot/Infospot',\n    '../Constants',\n    '../shaders/StereographicShader',\n    'skylark-threejs'\n], function (ImagePanorama, Infospot, Constants, StereographicShader, THREE) {\n    'use strict';\n    function LittlePlanet(type = 'image', source, size = 10000, ratio = 0.5) {\n        if (type === 'image') {\n            ImagePanorama.call(this, source, this.createGeometry(size, ratio), this.createMaterial(size));\n        }\n        this.size = size;\n        this.ratio = ratio;\n        this.EPS = 0.000001;\n        this.frameId = null;\n        this.dragging = false;\n        this.userMouse = new THREE.Vector2();\n        this.quatA = new THREE.Quaternion();\n        this.quatB = new THREE.Quaternion();\n        this.quatCur = new THREE.Quaternion();\n        this.quatSlerp = new THREE.Quaternion();\n        this.vectorX = new THREE.Vector3(1, 0, 0);\n        this.vectorY = new THREE.Vector3(0, 1, 0);\n        this.addEventListener('window-resize', this.onWindowResize);\n    }\n    LittlePlanet.prototype = Object.assign(Object.create(ImagePanorama.prototype), {\n        constructor: LittlePlanet,\n        add: function (object) {\n            if (arguments.length > 1) {\n                for (let i = 0; i < arguments.length; i++) {\n                    this.add(arguments[i]);\n                }\n                return this;\n            }\n            if (object instanceof Infospot) {\n                object.material.depthTest = false;\n            }\n            ImagePanorama.prototype.add.call(this, object);\n        },\n        createGeometry: function (size, ratio) {\n            return new THREE.PlaneBufferGeometry(size, size * ratio);\n        },\n        createMaterial: function (size) {\n            const shader = Object.assign({}, StereographicShader), uniforms = shader.uniforms;\n            uniforms.zoom.value = size;\n            uniforms.opacity.value = 0;\n            return new THREE.ShaderMaterial({\n                uniforms: uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader,\n                side: THREE.BackSide,\n                transparent: true\n            });\n        },\n        registerMouseEvents: function () {\n            this.container.addEventListener('mousedown', this.onMouseDown.bind(this), { passive: true });\n            this.container.addEventListener('mousemove', this.onMouseMove.bind(this), { passive: true });\n            this.container.addEventListener('mouseup', this.onMouseUp.bind(this), { passive: true });\n            this.container.addEventListener('touchstart', this.onMouseDown.bind(this), { passive: true });\n            this.container.addEventListener('touchmove', this.onMouseMove.bind(this), { passive: true });\n            this.container.addEventListener('touchend', this.onMouseUp.bind(this), { passive: true });\n            this.container.addEventListener('mousewheel', this.onMouseWheel.bind(this), { passive: false });\n            this.container.addEventListener('DOMMouseScroll', this.onMouseWheel.bind(this), { passive: false });\n            this.container.addEventListener('contextmenu', this.onContextMenu.bind(this), { passive: true });\n        },\n        unregisterMouseEvents: function () {\n            this.container.removeEventListener('mousedown', this.onMouseDown.bind(this), false);\n            this.container.removeEventListener('mousemove', this.onMouseMove.bind(this), false);\n            this.container.removeEventListener('mouseup', this.onMouseUp.bind(this), false);\n            this.container.removeEventListener('touchstart', this.onMouseDown.bind(this), false);\n            this.container.removeEventListener('touchmove', this.onMouseMove.bind(this), false);\n            this.container.removeEventListener('touchend', this.onMouseUp.bind(this), false);\n            this.container.removeEventListener('mousewheel', this.onMouseWheel.bind(this), false);\n            this.container.removeEventListener('DOMMouseScroll', this.onMouseWheel.bind(this), false);\n            this.container.removeEventListener('contextmenu', this.onContextMenu.bind(this), false);\n        },\n        onMouseDown: function (event) {\n            const inputCount = event.touches && event.touches.length || 1;\n            switch (inputCount) {\n            case 1:\n                const x = event.clientX >= 0 ? event.clientX : event.touches[0].clientX;\n                const y = event.clientY >= 0 ? event.clientY : event.touches[0].clientY;\n                this.dragging = true;\n                this.userMouse.set(x, y);\n                break;\n            case 2:\n                const dx = event.touches[0].pageX - event.touches[1].pageX;\n                const dy = event.touches[0].pageY - event.touches[1].pageY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                this.userMouse.pinchDistance = distance;\n                break;\n            default:\n                break;\n            }\n            this.onUpdateCallback();\n        },\n        onMouseMove: function (event) {\n            const inputCount = event.touches && event.touches.length || 1;\n            switch (inputCount) {\n            case 1:\n                const x = event.clientX >= 0 ? event.clientX : event.touches[0].clientX;\n                const y = event.clientY >= 0 ? event.clientY : event.touches[0].clientY;\n                const angleX = THREE.Math.degToRad(x - this.userMouse.x) * 0.4;\n                const angleY = THREE.Math.degToRad(y - this.userMouse.y) * 0.4;\n                if (this.dragging) {\n                    this.quatA.setFromAxisAngle(this.vectorY, angleX);\n                    this.quatB.setFromAxisAngle(this.vectorX, angleY);\n                    this.quatCur.multiply(this.quatA).multiply(this.quatB);\n                    this.userMouse.set(x, y);\n                }\n                break;\n            case 2:\n                const dx = event.touches[0].pageX - event.touches[1].pageX;\n                const dy = event.touches[0].pageY - event.touches[1].pageY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                this.addZoomDelta(this.userMouse.pinchDistance - distance);\n                break;\n            default:\n                break;\n            }\n        },\n        onMouseUp: function () {\n            this.dragging = false;\n        },\n        onMouseWheel: function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            let delta = 0;\n            if (event.wheelDelta !== undefined) {\n                delta = event.wheelDelta;\n            } else if (event.detail !== undefined) {\n                delta = -event.detail;\n            }\n            this.addZoomDelta(delta);\n            this.onUpdateCallback();\n        },\n        addZoomDelta: function (delta) {\n            const uniforms = this.material.uniforms;\n            const lowerBound = this.size * 0.1;\n            const upperBound = this.size * 10;\n            uniforms.zoom.value += delta;\n            if (uniforms.zoom.value <= lowerBound) {\n                uniforms.zoom.value = lowerBound;\n            } else if (uniforms.zoom.value >= upperBound) {\n                uniforms.zoom.value = upperBound;\n            }\n        },\n        onUpdateCallback: function () {\n            this.frameId = window.requestAnimationFrame(this.onUpdateCallback.bind(this));\n            this.quatSlerp.slerp(this.quatCur, 0.1);\n            if (this.material) {\n                this.material.uniforms.transform.value.makeRotationFromQuaternion(this.quatSlerp);\n            }\n            if (!this.dragging && 1 - this.quatSlerp.clone().dot(this.quatCur) < this.EPS) {\n                window.cancelAnimationFrame(this.frameId);\n            }\n        },\n        reset: function () {\n            this.quatCur.set(0, 0, 0, 1);\n            this.quatSlerp.set(0, 0, 0, 1);\n            this.onUpdateCallback();\n        },\n        onLoad: function (texture) {\n            this.material.uniforms.resolution.value = this.container.clientWidth / this.container.clientHeight;\n            this.registerMouseEvents();\n            this.onUpdateCallback();\n            this.dispatchEvent({\n                type: 'panolens-viewer-handler',\n                method: 'disableControl'\n            });\n            ImagePanorama.prototype.onLoad.call(this, texture);\n        },\n        onLeave: function () {\n            this.unregisterMouseEvents();\n            this.dispatchEvent({\n                type: 'panolens-viewer-handler',\n                method: 'enableControl',\n                data: Constants.CONTROLS.ORBIT\n            });\n            window.cancelAnimationFrame(this.frameId);\n            ImagePanorama.prototype.onLeave.call(this);\n        },\n        onWindowResize: function () {\n            this.material.uniforms.resolution.value = this.container.clientWidth / this.container.clientHeight;\n        },\n        onContextMenu: function () {\n            this.dragging = false;\n        },\n        dispose: function () {\n            this.unregisterMouseEvents();\n            ImagePanorama.prototype.dispose.call(this);\n        }\n    });\n    return LittlePlanet;\n});"]}