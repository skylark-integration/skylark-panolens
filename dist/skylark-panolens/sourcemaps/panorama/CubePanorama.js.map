{"version":3,"sources":["panorama/CubePanorama.js"],"names":["define","Panorama","CubeTextureLoader","THREE","CubePanorama","images","shader","Object","assign","ShaderLib","geometry","BoxBufferGeometry","material","ShaderMaterial","fragmentShader","vertexShader","uniforms","side","BackSide","transparent","call","this","edgeLength","opacity","value","prototype","create","constructor","load","onLoad","bind","onProgress","onError","texture","dispose","tCube","forEach","image","Cache","remove","CubeTexture"],"mappings":";;;;;;;AAAAA,QACI,aACA,+BACA,mBACD,SAAUC,EAAUC,EAAmBC,GACtC,aACA,SAASC,EAAaC,MAClB,MACMC,EAASC,OAAOC,UAAWL,EAAMM,UAAgB,MACjDC,EAAW,IAAIP,EAAMQ,kBAFR,IAAA,IAAA,KAGbC,EAAW,IAAIT,EAAMU,gBACvBC,eAAgBR,EAAOQ,eACvBC,aAAcT,EAAOS,aACrBC,SAAUV,EAAOU,SACjBC,KAAMd,EAAMe,SACZC,aAAa,IAEjBlB,EAASmB,KAAKC,KAAMX,EAAUE,GAC9BS,KAAKhB,OAASA,EACdgB,KAAKC,WAZc,IAanBD,KAAKT,SAASI,SAASO,QAAQC,MAAQ,EAsB3C,OApBApB,EAAaqB,UAAYlB,OAAOC,OAAOD,OAAOmB,OAAOzB,EAASwB,YAC1DE,YAAavB,EACbwB,KAAM,WACF1B,EAAkB0B,KAAKP,KAAKhB,OAAQgB,KAAKQ,OAAOC,KAAKT,MAAOA,KAAKU,WAAWD,KAAKT,MAAOA,KAAKW,QAAQF,KAAKT,QAE9GQ,OAAQ,SAAUI,GACdZ,KAAKT,SAASI,SAAgB,MAAEQ,MAAQS,EACxChC,EAASwB,UAAUI,OAAOT,KAAKC,OAEnCa,QAAS,WACL,MAAMV,MAACA,GAASH,KAAKT,SAASI,SAASmB,MACvCd,KAAKhB,OAAO+B,QAAQC,IAChBlC,EAAMmC,MAAMC,OAAOF,KAEnBb,aAAiBrB,EAAMqC,aACvBhB,EAAMU,UAEVjC,EAASwB,UAAUS,QAAQd,KAAKC,SAGjCjB","file":"../../panorama/CubePanorama.js","sourcesContent":["define([\n    './Panorama',\n    '../loaders/CubeTextureLoader',\n    'skylark-threejs'\n], function (Panorama, CubeTextureLoader, THREE) {\n    'use strict';\n    function CubePanorama(images = []) {\n        const edgeLength = 10000;\n        const shader = Object.assign({}, THREE.ShaderLib['cube']);\n        const geometry = new THREE.BoxBufferGeometry(edgeLength, edgeLength, edgeLength);\n        const material = new THREE.ShaderMaterial({\n            fragmentShader: shader.fragmentShader,\n            vertexShader: shader.vertexShader,\n            uniforms: shader.uniforms,\n            side: THREE.BackSide,\n            transparent: true\n        });\n        Panorama.call(this, geometry, material);\n        this.images = images;\n        this.edgeLength = edgeLength;\n        this.material.uniforms.opacity.value = 0;\n    }\n    CubePanorama.prototype = Object.assign(Object.create(Panorama.prototype), {\n        constructor: CubePanorama,\n        load: function () {\n            CubeTextureLoader.load(this.images, this.onLoad.bind(this), this.onProgress.bind(this), this.onError.bind(this));\n        },\n        onLoad: function (texture) {\n            this.material.uniforms['tCube'].value = texture;\n            Panorama.prototype.onLoad.call(this);\n        },\n        dispose: function () {\n            const {value} = this.material.uniforms.tCube;\n            this.images.forEach(image => {\n                THREE.Cache.remove(image);\n            });\n            if (value instanceof THREE.CubeTexture) {\n                value.dispose();\n            }\n            Panorama.prototype.dispose.call(this);\n        }\n    });\n    return CubePanorama;\n});"]}