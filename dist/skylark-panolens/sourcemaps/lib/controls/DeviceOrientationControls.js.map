{"version":3,"sources":["lib/controls/DeviceOrientationControls.js"],"names":["define","THREE","DeviceOrientationControls","camera","domElement","scope","this","changeEvent","type","rotY","rotX","tempX","tempY","rotation","reorder","undefined","document","enabled","deviceOrientation","screenOrientation","alpha","alphaOffsetAngle","onDeviceOrientationChangeEvent","event","onScreenOrientationChangeEvent","window","orientation","onTouchStartEvent","preventDefault","stopPropagation","touches","pageX","pageY","onTouchMoveEvent","Math","degToRad","updateAlphaOffsetAngle","connect","addEventListener","passive","update","bind","disconnect","removeEventListener","ignoreUpdate","beta","gamma","orient","quaternion","vectorFingerY","zee","Vector3","euler","Euler","q0","Quaternion","q1","sqrt","fingerQY","fingerQX","setFromAxisAngle","multiply","set","setFromEuler","setCameraQuaternion","dispatchEvent","angle","dispose","prototype","Object","assign","create","EventDispatcher","constructor"],"mappings":"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","file":"../../../lib/controls/DeviceOrientationControls.js","sourcesContent":["define(['skylark-threejs'], function (THREE) {\n    'use strict';\n    function DeviceOrientationControls(camera, domElement) {\n        var scope = this;\n        var changeEvent = { type: 'change' };\n        var rotY = 0;\n        var rotX = 0;\n        var tempX = 0;\n        var tempY = 0;\n        this.camera = camera;\n        this.camera.rotation.reorder('YXZ');\n        this.domElement = domElement !== undefined ? domElement : document;\n        this.enabled = true;\n        this.deviceOrientation = {};\n        this.screenOrientation = 0;\n        this.alpha = 0;\n        this.alphaOffsetAngle = 0;\n        var onDeviceOrientationChangeEvent = function (event) {\n            scope.deviceOrientation = event;\n        };\n        var onScreenOrientationChangeEvent = function () {\n            scope.screenOrientation = window.orientation || 0;\n        };\n        var onTouchStartEvent = function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            tempX = event.touches[0].pageX;\n            tempY = event.touches[0].pageY;\n        };\n        var onTouchMoveEvent = function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            rotY += THREE.Math.degToRad((event.touches[0].pageX - tempX) / 4);\n            rotX += THREE.Math.degToRad((tempY - event.touches[0].pageY) / 4);\n            scope.updateAlphaOffsetAngle(rotY);\n            tempX = event.touches[0].pageX;\n            tempY = event.touches[0].pageY;\n        };\n        var setCameraQuaternion = function (quaternion, alpha, beta, gamma, orient) {\n            var zee = new THREE.Vector3(0, 0, 1);\n            var euler = new THREE.Euler();\n            var q0 = new THREE.Quaternion();\n            var q1 = new THREE.Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n            var vectorFingerY;\n            var fingerQY = new THREE.Quaternion();\n            var fingerQX = new THREE.Quaternion();\n            if (scope.screenOrientation == 0) {\n                vectorFingerY = new THREE.Vector3(1, 0, 0);\n                fingerQY.setFromAxisAngle(vectorFingerY, -rotX);\n            } else if (scope.screenOrientation == 180) {\n                vectorFingerY = new THREE.Vector3(1, 0, 0);\n                fingerQY.setFromAxisAngle(vectorFingerY, rotX);\n            } else if (scope.screenOrientation == 90) {\n                vectorFingerY = new THREE.Vector3(0, 1, 0);\n                fingerQY.setFromAxisAngle(vectorFingerY, rotX);\n            } else if (scope.screenOrientation == -90) {\n                vectorFingerY = new THREE.Vector3(0, 1, 0);\n                fingerQY.setFromAxisAngle(vectorFingerY, -rotX);\n            }\n            q1.multiply(fingerQY);\n            q1.multiply(fingerQX);\n            euler.set(beta, alpha, -gamma, 'YXZ');\n            quaternion.setFromEuler(euler);\n            quaternion.multiply(q1);\n            quaternion.multiply(q0.setFromAxisAngle(zee, -orient));\n        };\n        this.connect = function () {\n            onScreenOrientationChangeEvent();\n            window.addEventListener('orientationchange', onScreenOrientationChangeEvent, { passive: true });\n            window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, { passive: true });\n            window.addEventListener('deviceorientation', this.update.bind(this), { passive: true });\n            scope.domElement.addEventListener('touchstart', onTouchStartEvent, { passive: false });\n            scope.domElement.addEventListener('touchmove', onTouchMoveEvent, { passive: false });\n            scope.enabled = true;\n        };\n        this.disconnect = function () {\n            window.removeEventListener('orientationchange', onScreenOrientationChangeEvent, false);\n            window.removeEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\n            window.removeEventListener('deviceorientation', this.update.bind(this), false);\n            scope.domElement.removeEventListener('touchstart', onTouchStartEvent, false);\n            scope.domElement.removeEventListener('touchmove', onTouchMoveEvent, false);\n            scope.enabled = false;\n        };\n        this.update = function (ignoreUpdate) {\n            if (scope.enabled === false)\n                return;\n            var alpha = scope.deviceOrientation.alpha ? THREE.Math.degToRad(scope.deviceOrientation.alpha) + scope.alphaOffsetAngle : 0;\n            var beta = scope.deviceOrientation.beta ? THREE.Math.degToRad(scope.deviceOrientation.beta) : 0;\n            var gamma = scope.deviceOrientation.gamma ? THREE.Math.degToRad(scope.deviceOrientation.gamma) : 0;\n            var orient = scope.screenOrientation ? THREE.Math.degToRad(scope.screenOrientation) : 0;\n            setCameraQuaternion(scope.camera.quaternion, alpha, beta, gamma, orient);\n            scope.alpha = alpha;\n            if (ignoreUpdate !== true) {\n                scope.dispatchEvent(changeEvent);\n            }\n        };\n        this.updateAlphaOffsetAngle = function (angle) {\n            this.alphaOffsetAngle = angle;\n            this.update();\n        };\n        this.dispose = function () {\n            this.disconnect();\n        };\n        this.connect();\n    }\n    ;\n    DeviceOrientationControls.prototype = Object.assign(Object.create(THREE.EventDispatcher.prototype), { constructor: DeviceOrientationControls });\n    return DeviceOrientationControls;\n});"]}