{"version":3,"sources":["lib/effects/CardboardEffect.js"],"names":["define","THREE","renderer","_camera","OrthographicCamera","_scene","Scene","_stereo","StereoCamera","aspect","_params","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","_renderTarget","WebGLRenderTarget","scissorTest","texture","generateMipmaps","distortion","Vector2","geometry","PlaneBufferGeometry","removeAttribute","toNonIndexed","positions","attributes","position","array","uvs","uv","count","positions2","Float32Array","length","set","uvs2","vector","i","l","x","y","dot","scalar","offset","material","MeshBasicMaterial","map","mesh","Mesh","add","this","setSize","width","height","pixelRatio","getPixelRatio","render","scene","camera","updateMatrixWorld","parent","update","autoClear","clear","scissor","viewport","setRenderTarget","cameraL","clearDepth","cameraR"],"mappings":"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","file":"../../../lib/effects/CardboardEffect.js","sourcesContent":["define(['skylark-threejs'], function (THREE) {\n    'use strict';\n    function CardboardEffect(renderer) {\n        var _camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        var _scene = new THREE.Scene();\n        var _stereo = new THREE.StereoCamera();\n        _stereo.aspect = 0.5;\n        var _params = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.NearestFilter,\n            format: THREE.RGBAFormat\n        };\n        var _renderTarget = new THREE.WebGLRenderTarget(512, 512, _params);\n        _renderTarget.scissorTest = true;\n        _renderTarget.texture.generateMipmaps = false;\n        var distortion = new THREE.Vector2(0.441, 0.156);\n        var geometry = new THREE.PlaneBufferGeometry(1, 1, 10, 20).removeAttribute('normal').toNonIndexed();\n        var positions = geometry.attributes.position.array;\n        var uvs = geometry.attributes.uv.array;\n        geometry.attributes.position.count *= 2;\n        geometry.attributes.uv.count *= 2;\n        var positions2 = new Float32Array(positions.length * 2);\n        positions2.set(positions);\n        positions2.set(positions, positions.length);\n        var uvs2 = new Float32Array(uvs.length * 2);\n        uvs2.set(uvs);\n        uvs2.set(uvs, uvs.length);\n        var vector = new THREE.Vector2();\n        var length = positions.length / 3;\n        for (var i = 0, l = positions2.length / 3; i < l; i++) {\n            vector.x = positions2[i * 3 + 0];\n            vector.y = positions2[i * 3 + 1];\n            var dot = vector.dot(vector);\n            var scalar = 1.5 + (distortion.x + distortion.y * dot) * dot;\n            var offset = i < length ? 0 : 1;\n            positions2[i * 3 + 0] = vector.x / scalar * 1.5 - 0.5 + offset;\n            positions2[i * 3 + 1] = vector.y / scalar * 3;\n            uvs2[i * 2] = (uvs2[i * 2] + offset) * 0.5;\n        }\n        geometry.attributes.position.array = positions2;\n        geometry.attributes.uv.array = uvs2;\n        var material = new THREE.MeshBasicMaterial({ map: _renderTarget.texture });\n        var mesh = new THREE.Mesh(geometry, material);\n        _scene.add(mesh);\n        this.setSize = function (width, height) {\n            renderer.setSize(width, height);\n            var pixelRatio = renderer.getPixelRatio();\n            _renderTarget.setSize(width * pixelRatio, height * pixelRatio);\n        };\n        this.render = function (scene, camera) {\n            scene.updateMatrixWorld();\n            if (camera.parent === null)\n                camera.updateMatrixWorld();\n            _stereo.update(camera);\n            var width = _renderTarget.width / 2;\n            var height = _renderTarget.height;\n            if (renderer.autoClear)\n                renderer.clear();\n            _renderTarget.scissor.set(0, 0, width, height);\n            _renderTarget.viewport.set(0, 0, width, height);\n            renderer.setRenderTarget(_renderTarget);\n            renderer.render(scene, _stereo.cameraL);\n            renderer.clearDepth();\n            _renderTarget.scissor.set(width, 0, width, height);\n            _renderTarget.viewport.set(width, 0, width, height);\n            renderer.setRenderTarget(_renderTarget);\n            renderer.render(scene, _stereo.cameraR);\n            renderer.clearDepth();\n            renderer.setRenderTarget(null);\n            renderer.render(_scene, _camera);\n        };\n    }\n    ;\n    return CardboardEffect;\n});"]}