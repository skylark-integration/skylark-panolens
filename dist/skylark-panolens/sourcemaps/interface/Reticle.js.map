{"version":3,"sources":["interface/Reticle.js"],"names":["define","THREE","Reticle","color","autoSelect","dwellTime","this","dpr","window","devicePixelRatio","canvas","context","createCanvas","material","SpriteMaterial","map","createCanvasTexture","Sprite","call","canvasWidth","width","canvasHeight","height","Color","rippleDuration","position","z","center","set","scale","startTimestamp","timerId","callback","frustumCulled","updateCanvasArcByProgress","prototype","Object","assign","create","constructor","setColor","copy","texture","CanvasTexture","minFilter","LinearFilter","magFilter","generateMipmaps","document","createElement","getContext","shadowBlur","shadowColor","progress","degree","Math","PI","getStyle","x","y","clearRect","beginPath","arc","fillStyle","fill","strokeStyle","lineWidth","stroke","closePath","needsUpdate","ripple","duration","timestamp","performance","now","update","requestAnimationFrame","opacity","radius","r","g","b","cancelAnimationFrame","dispatchEvent","type","show","visible","hide","start","end","bind"],"mappings":"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","file":"../../interface/Reticle.js","sourcesContent":["define(['skylark-threejs'], function (THREE) {\n    'use strict';\n    function Reticle(color = 16777215, autoSelect = true, dwellTime = 1500) {\n        this.dpr = window.devicePixelRatio;\n        const {canvas, context} = this.createCanvas();\n        const material = new THREE.SpriteMaterial({\n            color,\n            map: this.createCanvasTexture(canvas)\n        });\n        THREE.Sprite.call(this, material);\n        this.canvasWidth = canvas.width;\n        this.canvasHeight = canvas.height;\n        this.context = context;\n        this.color = color instanceof THREE.Color ? color : new THREE.Color(color);\n        this.autoSelect = autoSelect;\n        this.dwellTime = dwellTime;\n        this.rippleDuration = 500;\n        this.position.z = -10;\n        this.center.set(0.5, 0.5);\n        this.scale.set(0.5, 0.5, 1);\n        this.startTimestamp = null;\n        this.timerId = null;\n        this.callback = null;\n        this.frustumCulled = false;\n        this.updateCanvasArcByProgress(0);\n    }\n    ;\n    Reticle.prototype = Object.assign(Object.create(THREE.Sprite.prototype), {\n        constructor: Reticle,\n        setColor: function (color) {\n            this.material.color.copy(color instanceof THREE.Color ? color : new THREE.Color(color));\n        },\n        createCanvasTexture: function (canvas) {\n            const texture = new THREE.CanvasTexture(canvas);\n            texture.minFilter = THREE.LinearFilter;\n            texture.magFilter = THREE.LinearFilter;\n            texture.generateMipmaps = false;\n            return texture;\n        },\n        createCanvas: function () {\n            const width = 32;\n            const height = 32;\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            const dpr = this.dpr;\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n            context.scale(dpr, dpr);\n            context.shadowBlur = 5;\n            context.shadowColor = 'rgba(200,200,200,0.9)';\n            return {\n                canvas,\n                context\n            };\n        },\n        updateCanvasArcByProgress: function (progress) {\n            const context = this.context;\n            const {canvasWidth, canvasHeight, material} = this;\n            const dpr = this.dpr;\n            const degree = progress * Math.PI * 2;\n            const color = this.color.getStyle();\n            const x = canvasWidth * 0.5 / dpr;\n            const y = canvasHeight * 0.5 / dpr;\n            const lineWidth = 3;\n            context.clearRect(0, 0, canvasWidth, canvasHeight);\n            context.beginPath();\n            if (progress === 0) {\n                context.arc(x, y, canvasWidth / 16, 0, 2 * Math.PI);\n                context.fillStyle = color;\n                context.fill();\n            } else {\n                context.arc(x, y, canvasWidth / 4 - lineWidth, -Math.PI / 2, -Math.PI / 2 + degree);\n                context.strokeStyle = color;\n                context.lineWidth = lineWidth;\n                context.stroke();\n            }\n            context.closePath();\n            material.map.needsUpdate = true;\n        },\n        ripple: function () {\n            const context = this.context;\n            const {canvasWidth, canvasHeight, material} = this;\n            const duration = this.rippleDuration;\n            const timestamp = performance.now();\n            const color = this.color;\n            const dpr = this.dpr;\n            const x = canvasWidth * 0.5 / dpr;\n            const y = canvasHeight * 0.5 / dpr;\n            const update = () => {\n                const timerId = window.requestAnimationFrame(update);\n                const elapsed = performance.now() - timestamp;\n                const progress = elapsed / duration;\n                const opacity = 1 - progress > 0 ? 1 - progress : 0;\n                const radius = progress * canvasWidth * 0.5 / dpr;\n                context.clearRect(0, 0, canvasWidth, canvasHeight);\n                context.beginPath();\n                context.arc(x, y, radius, 0, Math.PI * 2);\n                context.fillStyle = `rgba(${ color.r * 255 }, ${ color.g * 255 }, ${ color.b * 255 }, ${ opacity })`;\n                context.fill();\n                context.closePath();\n                if (progress >= 1) {\n                    window.cancelAnimationFrame(timerId);\n                    this.updateCanvasArcByProgress(0);\n                    this.dispatchEvent({ type: 'reticle-ripple-end' });\n                }\n                material.map.needsUpdate = true;\n            };\n            this.dispatchEvent({ type: 'reticle-ripple-start' });\n            update();\n        },\n        show: function () {\n            this.visible = true;\n        },\n        hide: function () {\n            this.visible = false;\n        },\n        start: function (callback) {\n            if (!this.autoSelect) {\n                return;\n            }\n            this.dispatchEvent({ type: 'reticle-start' });\n            this.startTimestamp = performance.now();\n            this.callback = callback;\n            this.update();\n        },\n        end: function () {\n            if (!this.startTimestamp) {\n                return;\n            }\n            window.cancelAnimationFrame(this.timerId);\n            this.updateCanvasArcByProgress(0);\n            this.callback = null;\n            this.timerId = null;\n            this.startTimestamp = null;\n            this.dispatchEvent({ type: 'reticle-end' });\n        },\n        update: function () {\n            this.timerId = window.requestAnimationFrame(this.update.bind(this));\n            const elapsed = performance.now() - this.startTimestamp;\n            const progress = elapsed / this.dwellTime;\n            this.updateCanvasArcByProgress(progress);\n            this.dispatchEvent({\n                type: 'reticle-update',\n                progress\n            });\n            if (progress >= 1) {\n                window.cancelAnimationFrame(this.timerId);\n                if (this.callback) {\n                    this.callback();\n                }\n                this.end();\n                this.ripple();\n            }\n        }\n    });\n    return Reticle;\n});"]}