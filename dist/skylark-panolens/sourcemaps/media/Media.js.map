{"version":3,"sources":["media/Media.js"],"names":["define","THREE","Media","constraints","this","Object","assign","video","width","ideal","height","facingMode","exact","audio","container","scene","element","devices","stream","ratioScalar","videoDeviceIndex","prototype","create","EventDispatcher","setContainer","setScene","enumerateDevices","resolvedPromise","Promise","resolve","length","window","navigator","mediaDevices","switchNextVideoDevice","stop","bind","start","setVideDeviceIndex","index","getDevices","then","type","_devices","map","device","includes","push","reg","RegExp","filter","test","kind","getUserMedia","setMediaStream","playVideo","catch","error","console","warn","targetDevice","createVideoElement","Error","deviceId","active","getTracks","removeEventListener","onWindowResize","srcObject","background","createVideoTexture","addEventListener","play","dispatchEvent","pauseVideo","pause","texture","VideoTexture","generateMipmaps","minFilter","LinearFilter","magFilter","format","RGBFormat","center","set","document","createElement","setAttribute","style","position","top","left","objectPosition","objectFit","display","videoWidth","videoHeight","clientWidth","clientHeight","ratio","repeat"],"mappings":"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","file":"../../media/Media.js","sourcesContent":["define(['skylark-threejs'], function (THREE) {\n    'use strict';\n    function Media(constraints) {\n        const defaultConstraints = {\n            video: {\n                width: { ideal: 1920 },\n                height: { ideal: 1080 },\n                facingMode: { exact: 'environment' }\n            },\n            audio: false\n        };\n        this.constraints = Object.assign(defaultConstraints, constraints);\n        this.container = null;\n        this.scene = null;\n        this.element = null;\n        this.devices = [];\n        this.stream = null;\n        this.ratioScalar = 1;\n        this.videoDeviceIndex = 0;\n    }\n    ;\n    Media.prototype = Object.assign(Object.create(THREE.EventDispatcher.prototype), {\n        setContainer: function (container) {\n            this.container = container;\n        },\n        setScene: function (scene) {\n            this.scene = scene;\n        },\n        enumerateDevices: function () {\n            const devices = this.devices;\n            const resolvedPromise = new Promise(resolve => {\n                resolve(devices);\n            });\n            return devices.length > 0 ? resolvedPromise : window.navigator.mediaDevices.enumerateDevices();\n        },\n        switchNextVideoDevice: function () {\n            const stop = this.stop.bind(this);\n            const start = this.start.bind(this);\n            const setVideDeviceIndex = this.setVideDeviceIndex.bind(this);\n            let index = this.videoDeviceIndex;\n            this.getDevices('video').then(devices => {\n                stop();\n                index++;\n                if (index >= devices.length) {\n                    setVideDeviceIndex(0);\n                    index--;\n                } else {\n                    setVideDeviceIndex(index);\n                }\n                start(devices[index]);\n            });\n        },\n        getDevices: function (type = 'video') {\n            const devices = this.devices;\n            const validate = _devices => {\n                return _devices.map(device => {\n                    if (!devices.includes(device)) {\n                        devices.push(device);\n                    }\n                    return device;\n                });\n            };\n            const filter = _devices => {\n                const reg = new RegExp(type, 'i');\n                return _devices.filter(device => reg.test(device.kind));\n            };\n            return this.enumerateDevices().then(validate).then(filter);\n        },\n        getUserMedia: function (constraints) {\n            const setMediaStream = this.setMediaStream.bind(this);\n            const playVideo = this.playVideo.bind(this);\n            const onCatchError = error => {\n                console.warn(`PANOLENS.Media: ${ error }`);\n            };\n            return window.navigator.mediaDevices.getUserMedia(constraints).then(setMediaStream).then(playVideo).catch(onCatchError);\n        },\n        setVideDeviceIndex: function (index) {\n            this.videoDeviceIndex = index;\n        },\n        start: function (targetDevice) {\n            const constraints = this.constraints;\n            const getUserMedia = this.getUserMedia.bind(this);\n            const onVideoDevices = devices => {\n                if (!devices || devices.length === 0) {\n                    throw Error('no video device found');\n                }\n                const device = targetDevice || devices[0];\n                constraints.video.deviceId = device.deviceId;\n                return getUserMedia(constraints);\n            };\n            this.element = this.createVideoElement();\n            return this.getDevices().then(onVideoDevices);\n        },\n        stop: function () {\n            const stream = this.stream;\n            if (stream && stream.active) {\n                const track = stream.getTracks()[0];\n                track.stop();\n                window.removeEventListener('resize', this.onWindowResize.bind(this));\n                this.element = null;\n                this.stream = null;\n            }\n        },\n        setMediaStream: function (stream) {\n            this.stream = stream;\n            this.element.srcObject = stream;\n            if (this.scene) {\n                this.scene.background = this.createVideoTexture();\n            }\n            window.addEventListener('resize', this.onWindowResize.bind(this));\n        },\n        playVideo: function () {\n            const {element} = this;\n            if (element) {\n                element.play();\n                this.dispatchEvent({ type: 'play' });\n            }\n        },\n        pauseVideo: function () {\n            const {element} = this;\n            if (element) {\n                element.pause();\n                this.dispatchEvent({ type: 'pause' });\n            }\n        },\n        createVideoTexture: function () {\n            const video = this.element;\n            const texture = new THREE.VideoTexture(video);\n            texture.generateMipmaps = false;\n            texture.minFilter = THREE.LinearFilter;\n            texture.magFilter = THREE.LinearFilter;\n            texture.format = THREE.RGBFormat;\n            texture.center.set(0.5, 0.5);\n            video.addEventListener('canplay', this.onWindowResize.bind(this));\n            return texture;\n        },\n        createVideoElement: function () {\n            const dispatchEvent = this.dispatchEvent.bind(this);\n            const video = document.createElement('video');\n            const canPlay = () => dispatchEvent({ type: 'canplay' });\n            video.setAttribute('autoplay', '');\n            video.setAttribute('muted', '');\n            video.setAttribute('playsinline', '');\n            video.style.position = 'absolute';\n            video.style.top = '0';\n            video.style.left = '0';\n            video.style.width = '100%';\n            video.style.height = '100%';\n            video.style.objectPosition = 'center';\n            video.style.objectFit = 'cover';\n            video.style.display = this.scene ? 'none' : '';\n            video.addEventListener('canplay', canPlay);\n            return video;\n        },\n        onWindowResize: function () {\n            if (this.element && this.element.videoWidth && this.element.videoHeight && this.scene) {\n                const {\n                    clientWidth: width,\n                    clientHeight: height\n                } = this.container;\n                const texture = this.scene.background;\n                const {videoWidth, videoHeight} = this.element;\n                const cameraRatio = videoHeight / videoWidth;\n                const viewportRatio = this.container ? width / height : 1;\n                const ratio = cameraRatio * viewportRatio * this.ratioScalar;\n                if (width > height) {\n                    texture.repeat.set(ratio, 1);\n                } else {\n                    texture.repeat.set(1, 1 / ratio);\n                }\n            }\n        }\n    });\n    return Media;\n});"]}