{"version":3,"sources":["shaders/StereographicShader.js"],"names":["define","THREE","uniforms","tDiffuse","value","Texture","resolution","transform","Matrix4","zoom","opacity","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QAAQ,mBAAoB,SAAUC,GAClC,aAuCA,OArCIC,UACIC,UAAcC,MAAO,IAAIH,EAAMI,SAC/BC,YAAgBF,MAAO,GACvBG,WAAeH,MAAO,IAAIH,EAAMO,SAChCC,MAAUL,MAAO,GACjBM,SAAaN,MAAO,IAExBO,cACI,oBACA,gBACA,YACA,uCACA,KACFC,KAAK,MACPC,gBACI,8BACA,4BACA,0BACA,sBACA,yBACA,oBACA,sCACA,eACA,qCACA,qDACA,kEACA,sEACA,4DACA,wBACA,uDACA,kCACA,KACA,kDACA,6BACA,KACFD,KAAK","file":"../../shaders/StereographicShader.js","sourcesContent":["define(['skylark-threejs'], function (THREE) {\n    'use strict';\n    const StereographicShader = {\n        uniforms: {\n            'tDiffuse': { value: new THREE.Texture() },\n            'resolution': { value: 1 },\n            'transform': { value: new THREE.Matrix4() },\n            'zoom': { value: 1 },\n            'opacity': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            'vUv = uv;',\n            'gl_Position = vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform float resolution;',\n            'uniform mat4 transform;',\n            'uniform float zoom;',\n            'uniform float opacity;',\n            'varying vec2 vUv;',\n            'const float PI = 3.141592653589793;',\n            'void main(){',\n            'vec2 position = -1.0 +  2.0 * vUv;',\n            'position *= vec2( zoom * resolution, zoom * 0.5 );',\n            'float x2y2 = position.x * position.x + position.y * position.y;',\n            'vec3 sphere_pnt = vec3( 2. * position, x2y2 - 1. ) / ( x2y2 + 1. );',\n            'sphere_pnt = vec3( transform * vec4( sphere_pnt, 1.0 ) );',\n            'vec2 sampleUV = vec2(',\n            '(atan(sphere_pnt.y, sphere_pnt.x) / PI + 1.0) * 0.5,',\n            '(asin(sphere_pnt.z) / PI + 0.5)',\n            ');',\n            'gl_FragColor = texture2D( tDiffuse, sampleUV );',\n            'gl_FragColor.a *= opacity;',\n            '}'\n        ].join('\\n')\n    };\n    return StereographicShader;\n});"]}